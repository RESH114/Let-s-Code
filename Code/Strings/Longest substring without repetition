/*
Input:abcacabcd
Ouput:
Explanation:Longest substring is 'abcd' without repetition of characters
*/
class Main {
    public static void main(String[] ar) {
        String s = "abcabcabcd";
        System.out.println(method1(s));
        System.out.println(method2(s));
        System.out.println(method3(s));
    }
    //Time Complexity : O(n^2)
    public static int method1(String s){
        int max = 0;
        for(int i=0;i<s.length();i++){
            StringBuilder str = new StringBuilder();
            for(int j=i;j<s.length();j++){
                if(str.indexOf(String.valueOf(s.charAt(j))) != -1){
                    break;
                }
                str.append(s.charAt(j));
                max = Math.max(max,str.length());
            }

        }
        return max;
    }
    //Time Complexity:O(n)
    public static int method2(String s){
        int max = 0;
        Map<Character,Integer> str = new HashMap<>();
        for(int right=0,left=0;right<s.length();right++){
            char ch = s.charAt(right);
            if(str.containsKey(ch) && str.get(ch)>=left){
                left = str.get(ch) + 1;
            }
            max = Math.max(max,right-left+1);
            str.put(ch,right);
        }
        return max;
    }
  //Time Complexity:O(n)
    public static int method3(String s){
        int max = 0;
        for(int right=0,left=0;right<s.length();right++){
           int loc = s.indexOf(s.charAt(right),left);
           if(loc != right){
               left = loc+1;
           }
           max = Math.max(max,right-left+1);
        }
        return max;
    }
    
}
