package DSA;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Sorting {
    public static void main(String[] args) {
//        Scanner sc = new Scanner(System.in);
//        System.out.println("Enter the n-elements:");
//        int n = sc.nextInt();
//        int arr[] = new int[n];
//        System.out.println("Enter the elements : ");
//        for(int i=0;i<n;i++){
//            arr[i] = sc.nextInt();
//        }
        int arr[] = {92, 106, 365, 90, 33, 19, 72, 56, 45, 12};
        int n = arr.length;
        //bubbleSort(arr,n);
        quickSort(arr,0,n);
        System.out.println(Arrays.toString(arr));
    }
    public static void swap(int arr[], int a, int b) {
        int temp = arr[a];
        arr[a] = arr[b];
        arr[b] = temp;
    }

    // Time Complexity : O(N^2)
    // Space Complexity : O(1)
    //Bubble sort would need lesser memory then other sorting techniques.
    public static void bubbleSort(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    swap(arr, j, j + 1);
                    swapped = true;
                }
            }
            if (!swapped) {
                break;
            }
        }
    }
    //Cyclic Sort
    public static void cyclic(int arr[]){
	    int i=0;
	    while(i<arr.length){
	        int ind = arr[i]-1;
	        if(arr[i] != arr[ind]){
	            swap(arr,i,ind);
	        }else{
	            i++;
	        }
	    }
	}
    //Insertion Sorting
    // Time Complexity : O(N^2)
    // Space Complexity : O(1)
    public static void insertionSort(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j > 0; j--) {
                if (arr[j] < arr[j - 1]) {
                    swap(arr, j, j - 1);
                } else {
                    break;
                }
            }
        }
    }

    //Selection Sorting
    // Time Complexity : O(N^2)
    // Space Complexity : O(1)
    public static void selectionSort(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            int min = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[min]) {
                    min = j;
                }
            }
            swap(arr, min, i);
        }
    }
    /*
    * Counting Sort is a Integer-Sorting Algorithm
    * works efficiently on only positive integers
    * */
    //Count Sort using Array
    public static void countSortArray(int[] arr, int n) {
        if (arr == null || arr.length == 0) {
            return;
        }
        int max = arr[0];
        for (int i : arr) {
            max = Math.max(i, max);
        }
        int[] countArr = new int[max + 1];
        for (int i : arr) {
            countArr[i]++;
        }
        int index = 0;
        for(int i = 0; i <= max; i++) {
            while (countArr[i] > 0) {
                arr[index] = i;
                index++;
                countArr[i]--;
            }
        }
    }

    //Count Sort using HashMap
    public static void countSortMap(int[] arr, int n) {
        if (arr == null || arr.length == 0) {
            return;
        }
        int max = Arrays.stream(arr).max().getAsInt();
        int min = Arrays.stream(arr).min().getAsInt();
        Map<Integer,Integer> countMap = new HashMap<>();
        for(int i:arr){
            countMap.put(i,countMap.getOrDefault(i,0)+1);
        }
        int index=0;
        for(int i=min;i<=max;i++){
            int count = countMap.getOrDefault(i,0);
            for(int j=0;j<count;j++){
                arr[index] = i;
                index++;
            }
        }
    }
    //Radix Sort
    //The time complexity of Radix sort is O(kn)
    // space complexity of Radix sort is  O(k+n).
    public static void radixSort(int[] arr,int n){
        int max = Arrays.stream(arr).max().getAsInt();
        int count = (int)Math.floor(Math.log10(Math.abs(max)))+1;
        for (int exp = 1; max / exp > 0; exp *= 10) {
            countSort(arr, exp);
        }
    }
    public static void countSort(int arr[],int exp){
        int[] output = new int[arr.length];
        int[] count = new int[10];
        Arrays.fill(count, 0);
        for (int value : arr) {
            count[(value / exp) % 10]++;
        }
        for (int i = 1; i < 10; i++) {
            count[i] += count[i - 1];
        }
        for (int i = arr.length - 1; i >= 0; i--) {
            output[count[(arr[i] / exp) % 10] - 1] = arr[i];
            count[(arr[i] / exp) % 10]--;
        }
        System.arraycopy(output, 0, arr, 0, arr.length);
    }
    //HeapSort
    /*
    * heap is a complete binary tree
    * the index of any element in the list is i, the element in the index 2i+1 will become the left child
    * and element in 2i+2 index will become the right child*/
    public static void heapSort(int arr[],int n){
        for(int i=n/2-1;i>=0;i--){
            heapify(arr,n,i);
        }
        for(int i=n-1;i>=0;i--){
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] =temp;
            heapify(arr,i,0);
        }
    }
    public static void heapify(int arr[],int n,int i){
        int temp;
        int max = i;
        int left = 2*i+1;
        int right = 2*i+2;
        if(left<n && arr[left]>arr[max]){
            max = left;
        }
        if(right<n && arr[right]>arr[max]){
            max = right;
        }
        if(max!=i){
            temp = arr[i];
            arr[i] = arr[max];
            arr[max] = temp;
            heapify(arr,n,max);
        }
    }
    //Merge Sort
    //Time Complexity:O(nlogn)
    //Space Complexity:O(n)
    public static int[] mergeSort(int arr[]){
        if(arr.length <= 1){
            return arr;
        }
        int mid = arr.length/2;
        int left[] = mergeSort(Arrays.copyOfRange(arr,0,mid));
        int right[] = mergeSort(Arrays.copyOfRange(arr,mid,arr.length));
        return merge(left,right);
    }
    public static int[] merge(int left[],int right[]){
        int result[] = new int[left.length+right.length];
        int i=0,j=0,k=0;
        while(i<left.length && j<right.length){
            if(left[i]<right[j]){
                result[k]=left[i++];
            }else if(left[i]>right[i]){
                result[k]=right[j++];
            }
            k++;
        }
        while(i<left.length){
            result[k++] = left[i++];
        }
        while(j<right.length){
            result[k++] = right[j++];
        }
        return result;
    }
    //Merge Sort - InPlace Algorithm
    public static void mergeInPlace(int[] arr,int s,int e){
        if(e-s == 1)
            return;
        int  mid = (e+s)/2;
        mergeInPlace(arr,s,mid);
        mergeInPlace(arr,mid,e);
        mergeSortInPlace(arr,s,mid,e);
    }
    public static void mergeSortInPlace(int arr[],int s,int mid,int e){
        int mix[] = new int[e-s];
        int i=s,j=mid,k=0;
        while(i<mid && j<e){
            if(arr[i]<arr[j]){
                mix[k++] = arr[i++];
            }else{
                mix[k++] = arr[j++];
            }
        }
        while(i<mid){
            mix[k++] = arr[i++];
        }
        while(j<e){
            mix[k++] = arr[j++];
        }
        for(int p=0;p<mix.length;p++){
            arr[s+p] = mix[p];
        }
    }
    //Quick Sort - Divide and conquer Approach
    //Time Complexity : O(nlogn)
    //Space Complexity : O(n)
    public static void quickSort(int arr[],int low,int high){
        if(low>=high){
            return;
        }
        int s = low,e=high;
        int mid = s+(e-s)/2;
        int pivot = arr[mid];
        while(s<=e){
            while(arr[s]<pivot)
                s++;
            while(arr[e]>pivot)
                e--;
            if(s<=e){
                swap(arr,s,e);
                s++;
                e--;
            }
        }
        quickSort(arr,low,e);
        quickSort(arr,s,high);
    }
}
