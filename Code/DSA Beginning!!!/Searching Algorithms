package DSA;

import java.util.Scanner;

public class Search {
    public static void main(String[] args) {
        linearSearchStart();
        binarySearchStart();
    }

    public static void linearSearchStart(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the n-elements:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        System.out.println("Enter the elements : ");
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the target element:");
        int target = sc.nextInt();
        if(linearSearch(arr,target)){
            System.out.println("Element found");
        }else{
            System.out.println("Element not found");
        }
    }
    // Space Complexity : O(N)
    // Time Complexity : O(N)
    public static boolean linearSearch(int arr[],int target){
        for(int i=0;i<arr.length;i++){
            if(arr[i] == target){
                return true;
            }
        }
        return false;
    }

    public static void binarySearchStart(){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the n-elements:");
        int n = sc.nextInt();
        int arr[] = new int[n];
        System.out.println("Enter the elements : ");
        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the target element:");
        int target = sc.nextInt();
        //Iteration Implementation
        if(binarySearchIterative(arr,target)){
            System.out.println("Element found");
        }else{
            System.out.println("Element not found");
        }
        //Recursive Implementation
        if(binarySearchRecursive(arr,target,0,n-1)){
            System.out.println("Element found");
        }else{
            System.out.println("Element not found");
        }

    }
    // Binary Search (Recursive)
    // Time Complexity : O(N)
    // Space Complexity : O(1)
    // Auxiliary Space Complexity : O(N) due to function call stack
    public static boolean binarySearchRecursive(int[] arr,int target,int low,int high) {
        if(low>high){
            return false;
        }
        int mid = low + (high-low)/2;
        if(arr[mid] == target){
            return true;
        }else if(arr[mid] > target){
            return binarySearchRecursive(arr,target,low,mid-1);
        }else if(arr[mid] < target){
            return binarySearchRecursive(arr,target,mid+1,high);
        }
        return false;
    }
    // Binary Search (Iterative)
    // Time Complexity : O(N)
    // Space Complexity : O(1)
    public static boolean binarySearchIterative(int[] arr,int target){
        int low = 0;
        int high = arr.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(arr[mid] == target){
                return true;
            }else if(arr[mid] > target){
                high = mid-1;
            }else if(arr[mid] < target){
                low = mid+1;
            }
        }
        return false;
    }
}
