class Solution {
    public int mincostTickets(int[] days, int[] costs) {
        if(days == null || costs == null){
            return 0;
        }
        int n = days.length;
        int dp[] = new int[n+1];
        int day1 = costs[0];
        int day7 = costs[1];
        int day30 = costs[2];
        for(int i=1;i<=n;i++){
            dp[i] = dp[i-1]+day1;
            int index7 = findDays(days,7,i-1,days[i-1]);
            dp[i]=Math.min(dp[i],dp[index7]+day7);
            int index30 = findDays(days,30,i-1,days[i-1]);
            dp[i] = Math.min(dp[i],dp[index30]+day30);
        }
        return dp[n];
    }
    public int findDays(int days[],int start,int end,int endDay){
        int l=0;
        int r=end;
        while(l<r){
            int mid = l+(r-l)/2;
            if(endDay-days[mid]+1 <= start){
                r = mid;
            }else{
                l=mid+1;
            }
        }
        return l;
    }
}
